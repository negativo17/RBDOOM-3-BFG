--- RBDOOM-3-BFG-e7817d770fdccfc0d9aabda854f7adcb4a5fe13e/neo/renderer/Image_files.cpp	2015-01-07 11:50:58.000000000 +0100
+++ RBDOOM-3-BFG-e7817d770fdccfc0d9aabda854f7adcb4a5fe13e.new/neo/renderer/Image_files.cpp	2015-01-15 14:11:45.991071297 +0100
@@ -622,25 +622,31 @@
 extern "C"
 {
 #include <png.h>
+#include <pngconf.h>
+}
 
+static void png_Error( png_structp pngPtr, png_const_charp msg )
+{
+	common->FatalError( "%s", msg );
+}
+
+static void png_Warning( png_structp pngPtr, png_const_charp msg )
+{
+	common->Warning( "%s", msg );
+}
+
+struct pngIO
+{
+	byte *buffer;
+	size_t size;
+};
+
+static void	png_ReadData( png_structp pngPtr, png_bytep data, png_size_t length )
+{
+	struct pngIO* p=(struct pngIO*)png_get_io_ptr(pngPtr);
+	memcpy(data, p->buffer, length);
+	p->buffer += length;
 
-	static void png_Error( png_structp pngPtr, png_const_charp msg )
-	{
-		common->FatalError( "%s", msg );
-	}
-	
-	static void png_Warning( png_structp pngPtr, png_const_charp msg )
-	{
-		common->Warning( "%s", msg );
-	}
-	
-	static void	png_ReadData( png_structp pngPtr, png_bytep data, png_size_t length )
-	{
-		memcpy( data, ( byte* )pngPtr->io_ptr, length );
-		
-		pngPtr->io_ptr = ( ( byte* ) pngPtr->io_ptr ) + length;
-	}
-	
 }
 
 /*
@@ -650,7 +656,7 @@
 */
 static void LoadPNG( const char* filename, unsigned char** pic, int* width, int* height, ID_TIME_T* timestamp )
 {
-	byte*	fbuffer;
+	struct pngIO io_s;
 	
 	if( !pic )
 	{
@@ -663,8 +669,8 @@
 	//
 	// load the file
 	//
-	int fileSize = fileSystem->ReadFile( filename, ( void** )&fbuffer, timestamp );
-	if( !fbuffer )
+	int fileSize = fileSystem->ReadFile( filename, ( void** )&io_s.buffer, timestamp );
+	if( !io_s.buffer )
 	{
 		return;
 	}
@@ -683,7 +689,7 @@
 		common->Error( "LoadPNG( %s ): png_create_info_struct failed", filename );
 	}
 	
-	png_set_read_fn( pngPtr, fbuffer, png_ReadData );
+	png_set_read_fn( pngPtr, &io_s, png_ReadData );
 	
 	png_set_sig_bytes( pngPtr, 0 );
 	
@@ -757,30 +763,32 @@
 	
 	png_read_end( pngPtr, infoPtr );
 	
+	fileSystem->FreeFile(io_s.buffer);
+
 	png_destroy_read_struct( &pngPtr, &infoPtr, NULL );
 	
 	R_StaticFree( rowPointers );
-	Mem_Free( fbuffer );
 }
 
-
-extern "C"
+static void	png_WriteData( png_structp pngPtr, png_bytep pngData, png_size_t length )
 {
 
-	static int png_compressedSize = 0;
-	static void	png_WriteData( png_structp pngPtr, png_bytep data, png_size_t length )
-	{
-		memcpy( ( byte* )pngPtr->io_ptr, data, length );
-		
-		pngPtr->io_ptr = ( ( byte* ) pngPtr->io_ptr ) + length;
-		
-		png_compressedSize += length;
-	}
-	
-	static void	png_FlushData( png_structp pngPtr ) { }
-	
+	struct pngIO* p=(struct pngIO*)png_get_io_ptr(pngPtr);
+	size_t nsize = p->size + length;
+
+	if(!p->buffer)
+	    png_error(pngPtr, "Write Error");
+
+	// appends compressed pngData to buffer
+	memcpy(p->buffer + p->size, pngData, length);
+	p->size += length;
+
+	//common->Warning( "Wrote %u bytes PNG", p->size );
 }
 
+static void	png_FlushData( png_structp pngPtr ) { }
+
+
 /*
 ================
 R_WritePNG
@@ -799,10 +807,14 @@
 	{
 		common->Error( "R_WritePNG( %s ): png_create_info_struct failed", filename );
 	}
-	
-	png_compressedSize = 0;
-	byte* buffer = ( byte* ) Mem_Alloc( width * height * bytesPerPixel, TAG_TEMP );
-	png_set_write_fn( pngPtr, buffer, png_WriteData, png_FlushData );
+
+	struct pngIO io_s;
+
+	// allocates 'safe' amount of memory assuming image does not grow in png compression as we don't have realloc
+	io_s.buffer = ( byte* ) Mem_Alloc( width * height * bytesPerPixel, TAG_TEMP );
+	io_s.size = 0;
+
+	png_set_write_fn( pngPtr, &io_s, png_WriteData, png_FlushData );
 	
 	if( bytesPerPixel == 4 )
 	{
@@ -843,10 +855,11 @@
 	png_destroy_write_struct( &pngPtr, &infoPtr );
 	
 	Mem_Free( rowPointers );
+
+	fileSystem->WriteFile( filename, io_s.buffer, io_s.size, basePath );
 	
-	fileSystem->WriteFile( filename, buffer, png_compressedSize, basePath );
-	
-	Mem_Free( buffer );
+	Mem_Free( io_s.buffer );
+
 }
 // RB end
 
